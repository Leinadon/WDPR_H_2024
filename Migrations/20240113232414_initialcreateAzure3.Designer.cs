// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WPR.Migrations
{
    [DbContext(typeof(WPRDbContext))]
    [Migration("20240113232414_initialcreateAzure3")]
    partial class initialcreateAzure3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("MyCustomSchema")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WPR.Answer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DoesResearchID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("SpecialistID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DoesResearchID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("SpecialistID");

                    b.ToTable("Answers", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("TrackingID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companys", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Disability", b =>
                {
                    b.Property<int>("DisabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisabilityId"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("DisabilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DisabilityId");

                    b.HasIndex("DisabilityTypeId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Disabilities", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.DisabilityType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DisabilityTypes", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.DoesResearch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("InformationTrackingScript")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResearchID")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SpecialistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ResearchID");

                    b.HasIndex("SpecialistId");

                    b.ToTable("DoesResearches", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Guardian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SpecialistID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Guardians", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("SpecialistID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID")
                        .IsUnique()
                        .HasFilter("[CompanyID] IS NOT NULL");

                    b.ToTable("Locations", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.OnlineAssignmentResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int>("DoesResearchID")
                        .HasColumnType("int");

                    b.Property<int>("OnlineAssignmentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoesResearchID");

                    b.HasIndex("OnlineAssignmentID");

                    b.ToTable("OnlineAssignmentResults", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.OurChat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DoesResearchID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("User1ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User2ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("DoesResearchID");

                    b.HasIndex("User1ID");

                    b.HasIndex("User2ID");

                    b.ToTable("OurChats", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.OurChatMessage", b =>
                {
                    b.Property<int>("OurChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OurChatMessageId"));

                    b.Property<int>("OurChatID")
                        .HasColumnType("int");

                    b.Property<string>("SenderUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("OurChatMessageId");

                    b.HasIndex("OurChatID");

                    b.HasIndex("SenderUserId");

                    b.ToTable("OurChatMessages", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("ID");

                    b.HasIndex("InterviewId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Questions", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Research", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("English")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reward")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("Researches", "MyCustomSchema");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WPR.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "MyCustomSchema");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WPR.Interview", b =>
                {
                    b.HasBaseType("WPR.Research");

                    b.ToTable("Interviews", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.OnlineAssignment", b =>
                {
                    b.HasBaseType("WPR.Research");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.ToTable("OnlineAssignments", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Questionnaire", b =>
                {
                    b.HasBaseType("WPR.Research");

                    b.ToTable("Questionnaires", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Employee", b =>
                {
                    b.HasBaseType("WPR.User");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Specialist", b =>
                {
                    b.HasBaseType("WPR.User");

                    b.Property<bool>("ApproachCommercialParties")
                        .HasColumnType("bit");

                    b.Property<string>("DisabilityNote")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("GuardianID")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MessagePreference")
                        .HasColumnType("int");

                    b.Property<string>("ToolsUsing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GuardianID")
                        .IsUnique()
                        .HasFilter("[GuardianID] IS NOT NULL");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.ToTable("Specialists", "MyCustomSchema");
                });

            modelBuilder.Entity("WPR.Answer", b =>
                {
                    b.HasOne("WPR.DoesResearch", "DoesResearch")
                        .WithMany("Answers")
                        .HasForeignKey("DoesResearchID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WPR.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WPR.Specialist", "Specialist")
                        .WithMany()
                        .HasForeignKey("SpecialistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoesResearch");

                    b.Navigation("Question");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("WPR.Disability", b =>
                {
                    b.HasOne("WPR.DisabilityType", "DisabilityType")
                        .WithMany("disabilities")
                        .HasForeignKey("DisabilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPR.Specialist", "Specialist")
                        .WithMany("Disabilities")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisabilityType");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("WPR.DoesResearch", b =>
                {
                    b.HasOne("WPR.Research", null)
                        .WithMany("doesResearches")
                        .HasForeignKey("ResearchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPR.Specialist", null)
                        .WithMany("doesResearches")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WPR.Location", b =>
                {
                    b.HasOne("WPR.Company", "Company")
                        .WithOne("Location")
                        .HasForeignKey("WPR.Location", "CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WPR.OnlineAssignmentResult", b =>
                {
                    b.HasOne("WPR.DoesResearch", "doesResearch")
                        .WithMany("OnlineAssignmentResults")
                        .HasForeignKey("DoesResearchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPR.OnlineAssignment", "OnlineAssignment")
                        .WithMany("OnlineAssignmentResults")
                        .HasForeignKey("OnlineAssignmentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OnlineAssignment");

                    b.Navigation("doesResearch");
                });

            modelBuilder.Entity("WPR.OurChat", b =>
                {
                    b.HasOne("WPR.DoesResearch", "DoesResearch")
                        .WithMany()
                        .HasForeignKey("DoesResearchID");

                    b.HasOne("WPR.User", "User1")
                        .WithMany("Chats")
                        .HasForeignKey("User1ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPR.User", "User2")
                        .WithMany("Chats2")
                        .HasForeignKey("User2ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DoesResearch");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("WPR.OurChatMessage", b =>
                {
                    b.HasOne("WPR.OurChat", "ourChat")
                        .WithMany("Messages")
                        .HasForeignKey("OurChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPR.User", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("ourChat");
                });

            modelBuilder.Entity("WPR.Question", b =>
                {
                    b.HasOne("WPR.Interview", "Interview")
                        .WithMany("Questions")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPR.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("WPR.Research", b =>
                {
                    b.HasOne("WPR.Company", "Company")
                        .WithMany("Researches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WPR.Interview", b =>
                {
                    b.HasOne("WPR.Research", null)
                        .WithOne()
                        .HasForeignKey("WPR.Interview", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WPR.OnlineAssignment", b =>
                {
                    b.HasOne("WPR.Research", null)
                        .WithOne()
                        .HasForeignKey("WPR.OnlineAssignment", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WPR.Questionnaire", b =>
                {
                    b.HasOne("WPR.Research", null)
                        .WithOne()
                        .HasForeignKey("WPR.Questionnaire", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WPR.Employee", b =>
                {
                    b.HasOne("WPR.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPR.User", null)
                        .WithOne()
                        .HasForeignKey("WPR.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WPR.Specialist", b =>
                {
                    b.HasOne("WPR.Guardian", "Guardian")
                        .WithOne("specialist")
                        .HasForeignKey("WPR.Specialist", "GuardianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPR.User", null)
                        .WithOne()
                        .HasForeignKey("WPR.Specialist", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPR.Location", "Location")
                        .WithOne("specialist")
                        .HasForeignKey("WPR.Specialist", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guardian");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WPR.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Researches");
                });

            modelBuilder.Entity("WPR.DisabilityType", b =>
                {
                    b.Navigation("disabilities");
                });

            modelBuilder.Entity("WPR.DoesResearch", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("OnlineAssignmentResults");
                });

            modelBuilder.Entity("WPR.Guardian", b =>
                {
                    b.Navigation("specialist")
                        .IsRequired();
                });

            modelBuilder.Entity("WPR.Location", b =>
                {
                    b.Navigation("specialist");
                });

            modelBuilder.Entity("WPR.OurChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WPR.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("WPR.Research", b =>
                {
                    b.Navigation("doesResearches");
                });

            modelBuilder.Entity("WPR.User", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Chats");

                    b.Navigation("Chats2");
                });

            modelBuilder.Entity("WPR.Interview", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WPR.OnlineAssignment", b =>
                {
                    b.Navigation("OnlineAssignmentResults");
                });

            modelBuilder.Entity("WPR.Questionnaire", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WPR.Specialist", b =>
                {
                    b.Navigation("Disabilities");

                    b.Navigation("doesResearches");
                });
#pragma warning restore 612, 618
        }
    }
}
